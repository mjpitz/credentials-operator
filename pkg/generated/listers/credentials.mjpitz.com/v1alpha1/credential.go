// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/mjpitz/credentials-operator/pkg/apis/credentials.mjpitz.com/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CredentialLister helps list Credentials.
type CredentialLister interface {
	// List lists all Credentials in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Credential, err error)
	// Credentials returns an object that can list and get Credentials.
	Credentials(namespace string) CredentialNamespaceLister
	CredentialListerExpansion
}

// credentialLister implements the CredentialLister interface.
type credentialLister struct {
	indexer cache.Indexer
}

// NewCredentialLister returns a new CredentialLister.
func NewCredentialLister(indexer cache.Indexer) CredentialLister {
	return &credentialLister{indexer: indexer}
}

// List lists all Credentials in the indexer.
func (s *credentialLister) List(selector labels.Selector) (ret []*v1alpha1.Credential, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Credential))
	})
	return ret, err
}

// Credentials returns an object that can list and get Credentials.
func (s *credentialLister) Credentials(namespace string) CredentialNamespaceLister {
	return credentialNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CredentialNamespaceLister helps list and get Credentials.
type CredentialNamespaceLister interface {
	// List lists all Credentials in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Credential, err error)
	// Get retrieves the Credential from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Credential, error)
	CredentialNamespaceListerExpansion
}

// credentialNamespaceLister implements the CredentialNamespaceLister
// interface.
type credentialNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Credentials in the indexer for a given namespace.
func (s credentialNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Credential, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Credential))
	})
	return ret, err
}

// Get retrieves the Credential from the indexer for a given namespace and name.
func (s credentialNamespaceLister) Get(name string) (*v1alpha1.Credential, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("credential"), name)
	}
	return obj.(*v1alpha1.Credential), nil
}
