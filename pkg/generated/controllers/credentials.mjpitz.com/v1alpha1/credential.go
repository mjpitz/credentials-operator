// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/mjpitz/credentials-operator/pkg/apis/credentials.mjpitz.com/v1alpha1"
	clientset "github.com/mjpitz/credentials-operator/pkg/generated/clientset/versioned/typed/credentials.mjpitz.com/v1alpha1"
	informers "github.com/mjpitz/credentials-operator/pkg/generated/informers/externalversions/credentials.mjpitz.com/v1alpha1"
	listers "github.com/mjpitz/credentials-operator/pkg/generated/listers/credentials.mjpitz.com/v1alpha1"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"

	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"

	"k8s.io/client-go/tools/cache"
)

type CredentialHandler func(string, *v1alpha1.Credential) (*v1alpha1.Credential, error)

type CredentialController interface {
	generic.ControllerMeta
	CredentialClient

	OnChange(ctx context.Context, name string, sync CredentialHandler)
	OnRemove(ctx context.Context, name string, sync CredentialHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() CredentialCache
}

type CredentialClient interface {
	Create(*v1alpha1.Credential) (*v1alpha1.Credential, error)
	Update(*v1alpha1.Credential) (*v1alpha1.Credential, error)
	UpdateStatus(*v1alpha1.Credential) (*v1alpha1.Credential, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Credential, error)
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.CredentialList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Credential, err error)
}

type CredentialCache interface {
	Get(namespace, name string) (*v1alpha1.Credential, error)
	List(namespace string, selector labels.Selector) ([]*v1alpha1.Credential, error)

	AddIndexer(indexName string, indexer CredentialIndexer)
	GetByIndex(indexName, key string) ([]*v1alpha1.Credential, error)
}

type CredentialIndexer func(obj *v1alpha1.Credential) ([]string, error)

type credentialController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.CredentialsGetter
	informer          informers.CredentialInformer
	gvk               schema.GroupVersionKind
}

func NewCredentialController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.CredentialsGetter, informer informers.CredentialInformer) CredentialController {
	return &credentialController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromCredentialHandlerToHandler(sync CredentialHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1alpha1.Credential
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1alpha1.Credential))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *credentialController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1alpha1.Credential))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateCredentialDeepCopyOnChange(client CredentialClient, obj *v1alpha1.Credential, handler func(obj *v1alpha1.Credential) (*v1alpha1.Credential, error)) (*v1alpha1.Credential, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *credentialController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *credentialController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *credentialController) OnChange(ctx context.Context, name string, sync CredentialHandler) {
	c.AddGenericHandler(ctx, name, FromCredentialHandlerToHandler(sync))
}

func (c *credentialController) OnRemove(ctx context.Context, name string, sync CredentialHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromCredentialHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *credentialController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *credentialController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *credentialController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *credentialController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *credentialController) Cache() CredentialCache {
	return &credentialCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *credentialController) Create(obj *v1alpha1.Credential) (*v1alpha1.Credential, error) {
	return c.clientGetter.Credentials(obj.Namespace).Create(context.TODO(), obj, metav1.CreateOptions{})
}

func (c *credentialController) Update(obj *v1alpha1.Credential) (*v1alpha1.Credential, error) {
	return c.clientGetter.Credentials(obj.Namespace).Update(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *credentialController) UpdateStatus(obj *v1alpha1.Credential) (*v1alpha1.Credential, error) {
	return c.clientGetter.Credentials(obj.Namespace).UpdateStatus(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *credentialController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.clientGetter.Credentials(namespace).Delete(context.TODO(), name, *options)
}

func (c *credentialController) Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.Credential, error) {
	return c.clientGetter.Credentials(namespace).Get(context.TODO(), name, options)
}

func (c *credentialController) List(namespace string, opts metav1.ListOptions) (*v1alpha1.CredentialList, error) {
	return c.clientGetter.Credentials(namespace).List(context.TODO(), opts)
}

func (c *credentialController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.Credentials(namespace).Watch(context.TODO(), opts)
}

func (c *credentialController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Credential, err error) {
	return c.clientGetter.Credentials(namespace).Patch(context.TODO(), name, pt, data, metav1.PatchOptions{}, subresources...)
}

type credentialCache struct {
	lister  listers.CredentialLister
	indexer cache.Indexer
}

func (c *credentialCache) Get(namespace, name string) (*v1alpha1.Credential, error) {
	return c.lister.Credentials(namespace).Get(name)
}

func (c *credentialCache) List(namespace string, selector labels.Selector) ([]*v1alpha1.Credential, error) {
	return c.lister.Credentials(namespace).List(selector)
}

func (c *credentialCache) AddIndexer(indexName string, indexer CredentialIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1alpha1.Credential))
		},
	}))
}

func (c *credentialCache) GetByIndex(indexName, key string) (result []*v1alpha1.Credential, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1alpha1.Credential, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1alpha1.Credential))
	}
	return result, nil
}

type CredentialStatusHandler func(obj *v1alpha1.Credential, status v1alpha1.CredentialStatus) (v1alpha1.CredentialStatus, error)

type CredentialGeneratingHandler func(obj *v1alpha1.Credential, status v1alpha1.CredentialStatus) ([]runtime.Object, v1alpha1.CredentialStatus, error)

func RegisterCredentialStatusHandler(ctx context.Context, controller CredentialController, condition condition.Cond, name string, handler CredentialStatusHandler) {
	statusHandler := &credentialStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromCredentialHandlerToHandler(statusHandler.sync))
}

func RegisterCredentialGeneratingHandler(ctx context.Context, controller CredentialController, apply apply.Apply,
	condition condition.Cond, name string, handler CredentialGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &credentialGeneratingHandler{
		CredentialGeneratingHandler: handler,
		apply:                       apply,
		name:                        name,
		gvk:                         controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterCredentialStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type credentialStatusHandler struct {
	client    CredentialClient
	condition condition.Cond
	handler   CredentialStatusHandler
}

func (a *credentialStatusHandler) sync(key string, obj *v1alpha1.Credential) (*v1alpha1.Credential, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type credentialGeneratingHandler struct {
	CredentialGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *credentialGeneratingHandler) Remove(key string, obj *v1alpha1.Credential) (*v1alpha1.Credential, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1alpha1.Credential{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *credentialGeneratingHandler) Handle(obj *v1alpha1.Credential, status v1alpha1.CredentialStatus) (v1alpha1.CredentialStatus, error) {
	objs, newStatus, err := a.CredentialGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
